name: 'Terraform Check'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

env:
  terraform_version: "1.9.5"

jobs:
  build:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.terraform_version }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Validate
      run: terraform validate

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
  
    - name: Run Trivy scanner
      if: github.event_name == 'pull_request'
      uses: aquasecurity/trivy-action@0.24.0
      with:
        scan-type: config
        hide-progress: true
        output: trivy.txt
    
    - name: Publish Trivy Output to Summary
      id: scan
      if: github.event_name == 'pull_request'
      run: |
        if [[ -s trivy.txt ]]; then
          {
            echo "### Security Output"
            echo "<details><summary>Click to expand</summary>"
            echo ""
            echo '```terraform'
            cat trivy.txt
            echo '```'
            echo "</details>"
          } >> $GITHUB_STEP_SUMMARY
        fi
    
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      continue-on-error: true
      run: terraform plan -input=false -no-color

    - name: Comment PR
      uses: actions/github-script@v3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outputs.stdout }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outputs.stdout }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outputs.stdout }}\`
          #### Scan Results \`${{ steps.plan.outputs.stdout }}\``;
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Terraform checks\n` + output
          })
